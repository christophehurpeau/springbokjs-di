{"name":"springbokjs-di","tagline":"springbokjs dependency injection","body":"# springbokjs-di  [![NPM version][npm-image]][npm-url] [![Build Status][build-status-image]][build-status-url] [![Coverage][coverage-image]][coverage-url]\r\n\r\n[build-status-image]: https://drone.io/github.com/christophehurpeau/springbokjs-di/status.png\r\n[build-status-url]: https://drone.io/github.com/christophehurpeau/springbokjs-di/latest\r\n[npm-image]: https://img.shields.io/npm/v/springbokjs-di.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/springbokjs-di\r\n[coverage-image]: http://img.shields.io/badge/coverage-100%-brightgreen.svg?style=flat\r\n[coverage-url]: http://christophehurpeau.github.io/springbokjs-di/docs/coverage.html\r\n\r\n\r\nDependency injection library\r\n\r\n\r\n## How to use\r\n\r\n### ES5\r\n\r\n`classes/ClassA.js` a singleton class\r\n\r\n```js\r\nexports.ClassA = (function() {\r\n    var ClassA = function() {\r\n\r\n    };\r\n    ClassA.singleton = true; // the di will create a unique instance of the class\r\n    ClassA.prototype.sayHello = function(name) {\r\n        console.log('Hello ' + name + '!');\r\n    };\r\n    return ClassA;\r\n})();\r\n```\r\n\r\n`classes/ClassB.js`\r\n\r\n```js\r\nexports.ClassB = (function() {\r\n    var ClassB = function(name) {\r\n        this.name = name;\r\n    };\r\n    ClassB.dependencies = [ 'classA' ]; // use the singleton\r\n    ClassB.prototype.sayHello = function() {\r\n        this.classA.sayHello(this.name);\r\n    };\r\n    return ClassB;\r\n})();\r\n```\r\n\r\n`classes/ClassC.js`\r\n\r\n```js\r\nexports.ClassC = (function() {\r\n    var ClassC = function() {\r\n    };\r\n    ClassC.dependencies = { 'classB': { name: 'ClassB', arguments: ['John'] } };\r\n\r\n    ClassC.prototype.sayHello = function() {\r\n        this.classB.sayHello();\r\n    };\r\n    return ClassC;\r\n})();\r\n```\r\n\r\nYou can also use the di in the class (if classD is loaded by the di)\r\n\r\n\r\n`classes/ClassD.js`\r\n\r\n```js\r\nexports.ClassD = (function() {\r\n    var ClassD = function() {\r\n    };\r\n    ClassD.prototype.initialize = function() {\r\n        this.classB = this.di.createInstance('ClassB', ['John']);\r\n    };\r\n\r\n    ClassD.prototype.sayHello = function() {\r\n        this.classB.sayHello();\r\n    };\r\n    return ClassD;\r\n})();\r\n```\r\n\r\n\r\n`app.js`\r\n\r\n```js\r\nvar Di = require('springbokjs-di').Di;\r\nvar di = new Di();\r\ndi.directory('classes/').then(function() { // load classes from the directory\r\n    return di.getInitializedInstance('ClassD').then(function(classD) {\r\n        classD.sayHello();\r\n    });\r\n});\r\n\r\n```\r\n\r\n\r\n### ES6\r\n\r\n`classes/ClassA.js` a singleton class\r\n\r\n```js\r\nexport var singleton = true; // the di will create a unique instance of the class\r\nexport class ClassA {\r\n    sayHello(name) {\r\n        console.log(`Hello ${ name }!');\r\n    };\r\n}\r\n```\r\n\r\n`classes/ClassB.js`\r\n\r\n```js\r\nexport var dependencies = [ 'classA' ]; // use the singleton\r\nexport class ClassB {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n    sayHello() {\r\n        this.classA.sayHello(this.name);\r\n    }\r\n}\r\n```\r\n\r\n`classes/ClassC.js`\r\n\r\n```js\r\nexport var dependencies = { 'classB': { name: 'ClassB', arguments: ['John'] };\r\nexport class ClassC {\r\n    sayHello() {\r\n        this.classB.sayHello();\r\n    }\r\n}\r\n```\r\n\r\nYou can also use the di in the class (if classD is loaded by the di)\r\n\r\n\r\n`classes/ClassC.js`\r\n\r\n```js\r\nexport classClassD {\r\n    constructor() {\r\n        this.classB = this.di.createInstance('ClassB', ['John']);\r\n    }\r\n    sayHello() {\r\n        this.classB.sayHello();\r\n    };\r\n}\r\n```\r\n\r\n\r\n`app.js`\r\n\r\n```js\r\nvar Di = require('springbokjs-di').Di;\r\nvar di = new Di();\r\ndi.directory('classes/').then(() => { // load classes from the directory\r\n    return di.getInitializedInstance('ClassD').then((classD) => {\r\n        classD.sayHello();\r\n    });\r\n});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}